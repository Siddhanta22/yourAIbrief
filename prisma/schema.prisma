// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              UserRole  @default(SUBSCRIBER)
  isActive          Boolean   @default(true)
  timezone          String?   @default("UTC")
  preferences       Json?     @default("{}")
  preferredSendTime String? // e.g., '08:30 AM'

  accounts Account[]
  sessions Session[]
  subscriptions NewsletterSubscription[]
  newsletterReads NewsletterRead[]
  userInterests UserInterest[]
  analytics UserAnalytics[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Newsletter {
  id          String   @id @default(cuid())
  title       String
  content     Json
  summary     String?
  publishedAt DateTime @default(now())
  isPublished Boolean  @default(false)
  isPremium   Boolean  @default(false)
  tags        String[]
  sections    Json
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions NewsletterSubscription[]
  reads NewsletterRead[]
  analytics NewsletterAnalytics[]
}

model NewsletterSubscription {
  id           String   @id @default(cuid())
  newsletterId String
  userId       String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  newsletter Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([newsletterId, userId])
}

model NewsletterRead {
  id           String   @id @default(cuid())
  newsletterId String
  userId       String
  readAt       DateTime @default(now())
  timeSpent    Int?     // in seconds
  completed    Boolean  @default(false)

  newsletter Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([newsletterId, userId])
}

model NewsletterAnalytics {
  id           String   @id @default(cuid())
  newsletterId String
  opens        Int      @default(0)
  clicks       Int      @default(0)
  shares       Int      @default(0)
  unsubscribes Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  newsletter Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
}

model ContentSource {
  id          String   @id @default(cuid())
  name        String
  url         String
  type        SourceType
  isActive    Boolean  @default(true)
  lastFetched DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articles Article[]
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  summary     String?
  url         String
  sourceId    String
  publishedAt DateTime?
  tags        String[]
  relevance   Float    @default(0.0)
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  source ContentSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

model UserInterest {
  id       String @id @default(cuid())
  userId   String
  category String
  weight   Float  @default(1.0)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
}

model UserAnalytics {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  eventData Json?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id       String @id @default(cuid())
  name     String @unique
  subject  String
  content  String @db.Text
  variables Json?
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailLog {
  id        String   @id @default(cuid())
  to        String
  subject   String
  status    EmailStatus
  sentAt    DateTime @default(now())
  openedAt  DateTime?
  clickedAt DateTime?
  metadata  Json?
}

enum UserRole {
  ADMIN
  EDITOR
  SUBSCRIBER
  PREMIUM
}

enum SourceType {
  RSS
  API
  SCRAPER
  MANUAL
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
} 